# -*- coding: utf-8 -*-
"""ADA-ProyectoFinal.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iI0t-dR1AAEUfo2VOh9hXfToct4TTHH2

**ALUMNOS**
- Piero Fabricio Poblete Andía
- Miguel Andrés Flavio Ocharan Coaquira

INSTALAR BIBLIOTECAS
"""

!pip install igraph

!pip install cartopy

"""IMPORTAR BIBLIOTECAS"""

import pandas as pd
import networkx as nx
import warnings
import seaborn as sns
import matplotlib.pyplot as plt
import igraph
import cartopy.crs as ccrs
import cartopy.feature as cfeature
from geopy.geocoders import Nominatim
from geopy.extra.rate_limiter import RateLimiter
from google.colab import drive
from collections import Counter

drive.mount('/content/drive')

"""# FUNCIONES

FUNCIÓN PARA GEOLOCALIZAR
"""

geolocator = Nominatim(user_agent="mi_app_usuario")
geocode = RateLimiter(geolocator.reverse, min_delay_seconds=1)

def obtener_pais(lat, lon):
    try:
        location = geocode((lat, lon))
        if location and 'country' in location.raw['address']:
            return location.raw['address']['country']
        else:
            return None
    except:
        return None

"""FUNCIÓN PARA GRAFICAR MAPA MUNDIAL"""

def graficar_mapa_mundial(latitudes, longitudes):

    fig = plt.figure(figsize=(15, 8))
    ax = plt.axes(projection=ccrs.PlateCarree())

    ax.stock_img()
    ax.add_feature(cfeature.BORDERS)
    ax.add_feature(cfeature.COASTLINE)
    ax.gridlines(draw_labels=True)

    ax.scatter(longitudes, latitudes, color='blue', s=30, alpha=0.5, transform=ccrs.PlateCarree(), label='Usuarios')

    plt.title("Mapa Mundial")
    plt.legend(loc="upper right")
    plt.show()

"""# CARGA DE DATOS"""

warnings.filterwarnings("ignore")

"""amigos_df"""

with open('/content/drive/MyDrive/ada_proyectofinal_data/10_million_user.txt', 'r') as f:
    lineas = [line.strip() for line in f]
amigos_df = pd.DataFrame({'usuario_amigos': lineas})

amigos_df['n_amigos'] = amigos_df['usuario_amigos'].apply(
    lambda x: len(x.replace(',', ' ').split())
)

"""ubicaciones"""

ubicaciones = pd.read_csv('/content/drive/MyDrive/ada_proyectofinal_data/10_million_location.txt', header=None, names=['lat', 'long'])

"""seguidores"""

contador = Counter()
with open('/content/drive/MyDrive/ada_proyectofinal_data/10_million_user.txt') as f:
    for linea in f:
        amigos = linea.strip().split(',')
        contador.update(amigos)

n = 10_000_000
seguidores_df = pd.DataFrame({
    'id_usuario': range(n),
    'n_seguidores': [contador.get(str(i), 0) for i in range(n)]
})
seguidores_df.set_index('id_usuario', inplace=True)

"""usuarios"""

usuarios = pd.concat([amigos_df, ubicaciones, seguidores_df], axis=1)
usuarios = usuarios[['lat', 'long', 'n_amigos', 'n_seguidores']]

"""# **EDA - ANÁLISIS EXPLORATORIO DE DATOS**

## 1.   USUARIOS - **amigos_df**

### INFO
"""

print(amigos_df.info())

"""### DESCRIPCIÓN"""

print(amigos_df.describe())

"""### NÚMERO DE DUPLICADOS"""

print(amigos_df.duplicated().sum())

"""### NÚMERO DE NULOS"""

print(amigos_df.isnull().sum())

"""### NÚMERO DE **NO** NULOS"""

print(amigos_df.notnull().sum())

"""### ¿COLUMNAS LLENAS?"""

print(amigos_df.any())

"""### HEAD - TAIL"""

print(amigos_df.head())

print(amigos_df.tail())

"""## 2. USUARIOS - **ubicaciones**

### INFO
"""

print(ubicaciones.info())

"""### DESCRIPCIÓN"""

print(ubicaciones.describe())

"""### NÚMERO DE DUPLICADOS"""

print(ubicaciones.duplicated().sum())

"""### NÚMERO DE NULOS"""

print(ubicaciones.isnull().sum())

"""### NÚMERO DE **NO** NULOS"""

print(ubicaciones.notnull().sum())

"""### ¿COLUMNAS LLENAS?"""

print(ubicaciones.any())

"""### HEAD - TAIL"""

print(ubicaciones.head())

print(ubicaciones.tail())

"""## 3. USUARIOS - **usuarios**

### INFO
"""

print(usuarios.info())

"""### DESCRIPCIÓN"""

print(usuarios.describe())

"""### NÚMERO DE DUPLICADOS"""

print(usuarios.duplicated().sum())

"""### NÚMERO DE NULOS"""

print(usuarios.isnull().sum())

"""### NÚMERO DE **NO** NULOS"""

print(usuarios.notnull().sum())

"""### ¿COLUMNAS LLENAS?"""

print(usuarios.any())

"""### HEAD - TAIL"""

print(usuarios.head())

print(usuarios.tail())

"""# DETECCIÓN DE OUTLINERS"""

outliers_ami = (amigos_df['n_amigos'] < 0)
outliers_ubi = ~((ubicaciones['lat'].between(-90, 90)) & (ubicaciones['long'].between(-180, 180)))

"""## OUTLINERS EN: **amigos_df**"""

print(f"Número de outliers (amigos): {outliers_ami.sum()}")

"""## OUTLINERS EN: **ubicaciones**"""

print(f"Número de outliers (ubicaciones): {outliers_ubi.sum()}")

"""# COMPRENSIÓN DE VARIABLES CLAVE

## EN: **amigos_df**
"""

print(amigos_df.describe())

"""## EN: **ubicaciones**"""

print(ubicaciones.describe())

"""# ESTADISTICAS

Usaremos el dataframe **usuarios**, con el fin de acceder tanto a valores propios de **ubicaciones**, **amigos_df** y **seguidores_df**
"""

print(usuarios.head(10))

"""Número de muestra"""

V = 10

"""## - SEGUN NÚMERO DE SEGUIDORES

### ORDENAMIENTO x NÚMERO DE SEGUIDORES
"""

usuarios_sr_maymen = usuarios.sort_values(by='n_seguidores', ascending=False)
usuarios_sr_menmay = usuarios.sort_values(by='n_seguidores', ascending=True)

"""### USUARIOS CON **MAS** SEGUIDORES"""

print(usuarios_sr_maymen.head(V))

"""### **PAISES** - USUARIOS CON **MAS** SEGUIDORES"""

paises = usuarios_sr_maymen.head(V).copy()

paises['pais'] = paises.apply(
    lambda row: obtener_pais(row['lat'], row['long']),
    axis=1
)

print(paises[['pais']])

"""### USUARIOS CON **MENOS** SEGUIDORES"""

print(usuarios_sr_menmay.head(V))

"""### **PAISES** - USUARIOS CON **MENOS** SEGUIDORES"""

paises = usuarios_sr_menmay.head(V).copy()

paises['pais'] = paises.apply(
    lambda row: obtener_pais(row['lat'], row['long']),
    axis=1
)

print(paises[['pais']])

"""## - SEGUN NÚMERO DE SEGUIDOS

### ORDENAMIENTO x NÚMERO DE SEGUIDOS
"""

usuarios_sd_maymen = usuarios.sort_values(by='n_amigos', ascending=False)
usuarios_sd_menmay = usuarios.sort_values(by='n_amigos', ascending=True)

"""### USUARIOS CON **MAS** SEGUIDOS"""

print(usuarios_sd_maymen.head(V))

"""### **PAISES** - USUARIOS CON **MAS** SEGUIDOS"""

paises = usuarios_sd_maymen.head(V).copy()

paises['pais'] = paises.apply(
    lambda row: obtener_pais(row['lat'], row['long']),
    axis=1
)

print(paises[['pais']])

"""### USUARIOS CON **MENOS** SEGUIDOS"""

print(usuarios_sd_menmay.head(V))

"""### **PAISES** - USUARIOS CON **MENOS** SEGUIDOS"""

paises = usuarios_sd_menmay.head(V).copy()

paises['pais'] = paises.apply(
    lambda row: obtener_pais(row['lat'], row['long']),
    axis=1
)

print(paises[['pais']])

"""# ESTUDIO DE GRAFO

## ASIGNACIÓN
"""

num_nodos = len(amigos_df)
num_aristas = sum(amigos_df['n_amigos'])
densidad = num_aristas / (num_nodos * (num_nodos - 1))
grado_prom = num_aristas / num_nodos

"""## NÚMERO DE NODOS"""

print(num_nodos)

"""## NÚMERO DE ARISTAS"""

print(num_aristas)

"""## DENSIDAD"""

print(densidad)

"""## PROMEDIO DE GRADO"""

print(grado_prom)

"""# GRÁFICOS - VISUALIZACIÓN

## GRÁFICO NÚMERO DE SEGUIDOS
"""

plt.figure(figsize=(14, 6))
sns.lineplot(data=amigos_df, x=amigos_df.index + 1, y='n_amigos')
plt.title("Número de seguidos por usuario")
plt.xlabel("ID de usuario")
plt.ylabel("Número de seguidos")
plt.show()

"""## GRÁFICO NÚMERO DE SEGUIDORES"""

plt.figure(figsize=(14, 6))
sns.lineplot(data=usuarios, x=usuarios.index + 1, y='n_seguidores')
plt.title("Número de seguidores por usuario")
plt.xlabel("ID de usuario")
plt.ylabel("Número de seguidores")
plt.show()

"""## HISTOGRAMA LATITUD"""

sns.histplot(ubicaciones['lat'], kde=True)
plt.title("Distribución de la latitud de las ubicaciones")
plt.xlabel("Latitud")
plt.ylabel("Frecuencia")
plt.show()

"""## HISTOGRAMA LONGITUD"""

sns.histplot(ubicaciones['long'], kde=True)
plt.title("Distribución de la longitud de las ubicaciones")
plt.xlabel("Longitud")
plt.ylabel("Frecuencia")
plt.show()

"""## GRÁFICO DE FRECUENCIA - UBICACIONES"""

counts = ubicaciones.groupby(['lat', 'long']).size().reset_index(name='count')

plt.figure(figsize=(10, 6))
plt.scatter(counts['long'], counts['lat'], s=counts['count'] * 5, alpha=0.6)
plt.xlabel('Longitud')
plt.ylabel('Latitud')
plt.title('Frecuencia LATITUD y LONGITUD')
plt.grid(True)
plt.show()

"""## GRÁFICO DE DENSIDAD - UBICACIONES"""

plt.figure(figsize=(10, 6))
plt.hist2d(ubicaciones['long'], ubicaciones['lat'], bins=100, cmap='coolwarm')
plt.colorbar(label='Número de repeticiones')
plt.xlabel('Longitud')
plt.ylabel('Latitud')
plt.title('Densidad LATITUD y LONGITUD')
plt.show()

"""## MAPA MUNDIAL

### **MAPA MUNDIAL** - allUSUARIOS
"""

graficar_mapa_mundial(ubicaciones["lat"], ubicaciones["long"])

"""### **MAPA MUNDIAL** - USUARIOS CON **MAS** SEGUIDORES"""

graficar_mapa_mundial(usuarios_sr_maymen.head(V)["lat"], usuarios_sr_maymen.head(V)["long"])

"""### **MAPA MUNDIAL** - USUARIOS CON **MENOS** SEGUIDORES"""

graficar_mapa_mundial(usuarios_sr_menmay.head(V)["lat"], usuarios_sr_menmay.head(V)["long"])

"""### **MAPA MUNDIAL** - USUARIOS CON **MAS** SEGUIDOS"""

graficar_mapa_mundial(usuarios_sd_maymen.head(V)["lat"], usuarios_sd_maymen.head(V)["long"])

"""### **MAPA MUNDIAL** - USUARIOS CON **MENOS** SEGUIDOS"""

graficar_mapa_mundial(usuarios_sd_menmay.head(V)["lat"], usuarios_sd_menmay.head(V)["long"])